name: Deploy CI/CD

on:
  pull_request:
    branches:
      - main
      - stage

jobs:
  ci-cd-deploy:
    if: ${{ (startsWith(github.event.pull_request.head.ref, 'release/') || github.event.pull_request.base.ref == 'stage') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21'

      - name: Install PNPM
        run: npm install -g pnpm@8

      - name: Install Node Dependencies
        run: pnpm install

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Create Database
        run: |
          mkdir -p ${{ github.workspace }}/database
          touch ${{ github.workspace }}/database/database.sqlite
          ls -la ${{ github.workspace }}/database

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Build assets
        run: pnpm run build

      - name: Clear Composer Cache
        run: composer clear-cache

      - name: Clear PNPM Cache
        run: pnpm store prune

      - name: Cache views
        run: |
          php artisan view:clear
          php artisan view:cache

      - name: Check Code Style with Pint
        run: ./vendor/bin/pint --test

      - name: Execute tests (Unit and Feature tests) via PEST
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
        run: vendor/bin/pest --parallel

  start-deploy:
    if: ${{ needs.ci-cd-deploy.result == 'success' && (github.event.pull_request.base.ref == 'main') }}
    needs: [ ci-cd-deploy ]
    runs-on: ubuntu-latest
    steps:
      - name: Set Current Date
        run: echo "CURRENT_DATE=$(TZ='America/Sao_Paulo' date +'%d/%m/%Y %H:%M:%S')" >> $GITHUB_ENV

      - name: Set Deployment Target
        run: |
          if [ "${{ github.event.pull_request.base.ref }}" == "stage" ]; then
            echo "DEPLOY_TARGET=Stage" >> $GITHUB_ENV
          elif [ "${{ github.event.pull_request.base.ref }}" == "main" ]; then
            echo "DEPLOY_TARGET=Production" >> $GITHUB_ENV
          fi

      - name: Notify Slack - Deployment Started
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: '#deploy'
          slack-message: |
            ########################################
            :clock1: O Deploy está iniciando.
            Iniciado por: ${{ github.actor }}
            às: ${{ env.CURRENT_DATE }}
            On: ${{ runner.os }}
            Repo: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Event: ${{ github.event_name }}
            Target: ${{ env.DEPLOY_TARGET }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  create-tag:
    if: ${{ needs.start-deploy.result == 'success' && github.event.pull_request.base.ref == 'main' }}
    needs: [ start-deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Garante que todas as tags sejam buscadas

      - name: Create and push tag
        run: |
          # Busca as tags para garantir que o repositório local esteja atualizado
          git fetch --tags

          # Encontra a última tag baseando-se na versão semântica
          LATEST_TAG=$(git tag | sort -V | tail -n1 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          IFS='.' read -ra PARTS <<< "${LATEST_TAG#v}"
          MAJOR="${PARTS[0]}"
          MINOR="${PARTS[1]}"
          PATCH="${PARTS[2]}"

          # Incrementa a parte do patch da versão
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"

          # Cria e envia a nova tag
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    if: ${{ needs.create-tag.result == 'success' && github.event.pull_request.base.ref == 'main' }}
    needs: [ create-tag ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          tools: composer:v2
          coverage: none
      - name: Require Forge CLI
        run: composer global require laravel/forge-cli
      - name: Deploy Site
        run: |
          forge server:switch devaction
          forge deploy devaction.com.br
        env:
          FORGE_API_TOKEN: ${{ secrets.FORGE_API_TOKEN }}


  finish-deploy:
    needs: [ deploy-production ]
    if: ${{ needs.deploy-production.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set Current Date
        id: current_date
        run: echo "CURRENT_DATE=$(TZ='America/Sao_Paulo' date +'%d/%m/%Y %H:%M:%S')" >> $GITHUB_ENV

      - name: Get latest tag or commit hash
        id: get_tag_or_hash
        run: |
          if [ "${{ github.event.pull_request.base.ref }}" == "main" ]; then
            git fetch --tags
            LATEST_TAG=$(git describe --tags --abbrev=0)
            echo "LATEST_TAG_OR_HASH=$LATEST_TAG" >> $GITHUB_ENV
          elif [ "${{ github.event.pull_request.base.ref }}" == "stage" ]; then
            LATEST_HASH=$(git rev-parse HEAD)
            echo "LATEST_TAG_OR_HASH=$LATEST_HASH" >> $GITHUB_ENV
          fi

      - name: Generate diff link
        id: diff_link
        run: |
          echo "DIFF_LINK=https://github.com/${{ github.repository }}/compare/${{ env.LATEST_TAG_OR_HASH }}..HEAD" >> $GITHUB_ENV

      - name: Notify Slack - Deployment Finished
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: '#deploy' # replace with your Slack channel ID
          slack-message: |
            ########################################
            :rocket: O Deploy foi concluída.
            Nova tag é: ${{ env.LATEST_TAG_OR_HASH }}.
            Link para o diff: ${{ env.DIFF_LINK }}
            Deployed by: ${{ github.actor }}
            ás: ${{ env.CURRENT_DATE }}
            On: ${{ runner.os }}
            Repo: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Event: ${{ github.event_name }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
